# Generated by Django 5.1.2 on 2025-09-07 15:30

from django.db import migrations


def migrate_medication_prices_to_finance(apps, schema_editor):
    """
    Migrate existing medication prices to the finance ServicePricing system.
    This removes pricing conflicts and centralizes all pricing.
    """
    Medication = apps.get_model('pharmacy', 'Medication')
    ServicePricing = apps.get_model('finance', 'ServicePricing')
    User = apps.get_model('auth_portal', 'User')
    
    # Get admin user for created_by field
    admin_user = User.objects.filter(role='ADMIN').first()
    if not admin_user:
        admin_user = User.objects.filter(is_superuser=True).first()
    if not admin_user:
        return  # Skip if no admin user found
    
    # Migrate existing medication prices
    for medication in Medication.objects.all():
        if hasattr(medication, 'unit_price') and medication.unit_price:
            # Create or update service pricing for this medication
            service_code = f"MED_{medication.barcode[:10]}"  # Use barcode as unique identifier
            
            ServicePricing.objects.get_or_create(
                service_code=service_code,
                defaults={
                    'service_name': medication.name,
                    'service_category': 'MEDICATION',
                    'standard_price': medication.unit_price,
                    'department': 'PHARMACY',
                    'description': f'{medication.generic_name} - {medication.manufacturer}',
                    'created_by': admin_user,
                    'is_active': medication.is_active
                }
            )


def reverse_migrate_medication_prices(apps, schema_editor):
    """
    Remove medication service pricing records.
    Note: This doesn't restore unit_price field - that requires separate migration.
    """
    ServicePricing = apps.get_model('finance', 'ServicePricing')
    # Remove all medication pricing (be careful with this in production)
    ServicePricing.objects.filter(service_category='MEDICATION').delete()


class Migration(migrations.Migration):

    dependencies = [
        ('pharmacy', '0001_initial'),
        ('finance', '0002_populate_service_pricing'),
    ]

    operations = [
        # First migrate the data
        migrations.RunPython(
            migrate_medication_prices_to_finance,
            reverse_migrate_medication_prices
        ),
        # Then remove the field
        migrations.RemoveField(
            model_name='medication',
            name='unit_price',
        ),
    ]

    dependencies = [
        ('pharmacy', '0001_initial'),
    ]

    operations = [
    ]
