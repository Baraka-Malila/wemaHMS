# Generated by Django 4.2.7 on 2025-09-04 11:14

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Brand/Trade name (e.g., Panadol 500mg)', max_length=200)),
                ('generic_name', models.CharField(help_text='Generic name (e.g., Paracetamol)', max_length=200)),
                ('manufacturer', models.CharField(help_text='Manufacturer company', max_length=100)),
                ('category', models.CharField(choices=[('ANALGESIC', 'Pain Relief'), ('ANTIBIOTIC', 'Antibiotic'), ('ANTIVIRAL', 'Antiviral'), ('VITAMIN', 'Vitamin/Supplement'), ('CARDIAC', 'Heart Medication'), ('DIABETES', 'Diabetes Medication'), ('RESPIRATORY', 'Respiratory'), ('OTHER', 'Other')], default='OTHER', max_length=20)),
                ('barcode', models.CharField(help_text='Primary barcode for scanning', max_length=50, unique=True)),
                ('qr_code', models.CharField(blank=True, help_text='QR code data if available', max_length=200, null=True)),
                ('alternative_codes', models.JSONField(blank=True, default=list, help_text='Additional codes that identify this medication')),
                ('current_stock', models.IntegerField(default=0, help_text='Current available quantity')),
                ('reorder_level', models.IntegerField(default=10, help_text='Minimum stock before reorder alert')),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit in TZS', max_digits=10)),
                ('requires_prescription', models.BooleanField(default=True, help_text='Requires doctor prescription')),
                ('is_active', models.BooleanField(default=True, help_text='Available for prescribing/dispensing')),
                ('supplier', models.CharField(blank=True, help_text='Primary supplier', max_length=100)),
                ('last_restocked', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='medications_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'pharmacy_medications',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PrescriptionQueue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('prescription_id', models.CharField(help_text='UUID from doctor.Prescription', max_length=36)),
                ('patient_id', models.CharField(help_text='Patient ID (PAT123)', max_length=20)),
                ('patient_name', models.CharField(help_text='Patient name for quick reference', max_length=100)),
                ('prescribed_by', models.CharField(help_text='Doctor name', max_length=100)),
                ('medications_list', models.JSONField(help_text='List of prescribed medications with quantities')),
                ('status', models.CharField(choices=[('PENDING', 'Waiting to be processed'), ('IN_PROGRESS', 'Being prepared by pharmacist'), ('COMPLETED', 'Ready for patient pickup'), ('DISPENSED', 'Given to patient'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=15)),
                ('priority', models.CharField(choices=[('LOW', 'Low Priority'), ('NORMAL', 'Normal Priority'), ('HIGH', 'High Priority'), ('URGENT', 'Urgent')], default='NORMAL', max_length=10)),
                ('total_amount', models.DecimalField(decimal_places=2, default=0, help_text='Total cost of prescription', max_digits=10)),
                ('pharmacist_notes', models.TextField(blank=True, help_text='Pharmacist notes about substitutions, dosage changes, etc.', null=True)),
                ('modified_medications', models.JSONField(blank=True, default=list, help_text='Medications modified by pharmacist')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_processing_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('dispensed_at', models.DateTimeField(blank=True, null=True)),
                ('processed_by', models.ForeignKey(blank=True, limit_choices_to={'role': 'PHARMACY'}, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='prescriptions_processed', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'pharmacy_prescription_queue',
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DispenseRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('scanned_code', models.CharField(help_text='The actual code that was scanned', max_length=200)),
                ('quantity_scanned', models.IntegerField(help_text='Number of units scanned')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('line_total', models.DecimalField(decimal_places=2, max_digits=10)),
                ('running_total', models.DecimalField(decimal_places=2, max_digits=10)),
                ('scanned_at', models.DateTimeField(auto_now_add=True)),
                ('medication', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pharmacy.medication')),
                ('prescription_queue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dispense_records', to='pharmacy.prescriptionqueue')),
                ('scanned_by', models.ForeignKey(limit_choices_to={'role': 'PHARMACY'}, on_delete=django.db.models.deletion.PROTECT, related_name='scans_performed', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'pharmacy_dispense_records',
                'ordering': ['-scanned_at'],
            },
        ),
        migrations.CreateModel(
            name='StockMovement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('movement_type', models.CharField(choices=[('RESTOCK', 'New stock added'), ('DISPENSE', 'Medication dispensed to patient'), ('EXPIRE', 'Expired medication removed'), ('ADJUST', 'Stock adjustment (count correction)'), ('DAMAGE', 'Damaged stock removed'), ('RETURN', 'Patient return')], max_length=10)),
                ('quantity', models.IntegerField(help_text='Positive for additions, negative for removals')),
                ('previous_stock', models.IntegerField(help_text='Stock before this movement')),
                ('new_stock', models.IntegerField(help_text='Stock after this movement')),
                ('reference_id', models.CharField(blank=True, help_text='Prescription ID, Purchase Order, etc.', max_length=36, null=True)),
                ('scanned_codes', models.JSONField(blank=True, default=list, help_text='Codes scanned during this movement')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('medication', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pharmacy.medication')),
                ('performed_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'pharmacy_stock_movements',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['medication', '-timestamp'], name='pharmacy_st_medicat_7a7d47_idx'), models.Index(fields=['movement_type', '-timestamp'], name='pharmacy_st_movemen_e787be_idx'), models.Index(fields=['reference_id'], name='pharmacy_st_referen_8bd997_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='prescriptionqueue',
            index=models.Index(fields=['status', '-created_at'], name='pharmacy_pr_status_b178c7_idx'),
        ),
        migrations.AddIndex(
            model_name='prescriptionqueue',
            index=models.Index(fields=['priority', '-created_at'], name='pharmacy_pr_priorit_4cf238_idx'),
        ),
        migrations.AddIndex(
            model_name='prescriptionqueue',
            index=models.Index(fields=['patient_id'], name='pharmacy_pr_patient_ee308a_idx'),
        ),
        migrations.AddIndex(
            model_name='prescriptionqueue',
            index=models.Index(fields=['prescription_id'], name='pharmacy_pr_prescri_8cba40_idx'),
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['barcode'], name='pharmacy_me_barcode_5e9dd6_idx'),
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['qr_code'], name='pharmacy_me_qr_code_c30049_idx'),
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['is_active', 'current_stock'], name='pharmacy_me_is_acti_33d38f_idx'),
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['category', 'is_active'], name='pharmacy_me_categor_d13361_idx'),
        ),
        migrations.AddIndex(
            model_name='dispenserecord',
            index=models.Index(fields=['prescription_queue', '-scanned_at'], name='pharmacy_di_prescri_89ef60_idx'),
        ),
        migrations.AddIndex(
            model_name='dispenserecord',
            index=models.Index(fields=['medication', '-scanned_at'], name='pharmacy_di_medicat_6e3645_idx'),
        ),
        migrations.AddIndex(
            model_name='dispenserecord',
            index=models.Index(fields=['scanned_code'], name='pharmacy_di_scanned_4ec7ca_idx'),
        ),
    ]
